<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc private="RFC (Draft-Fs)" ?>
<rfc ipr="none" category="info" docName="draft-harrys-allocation-table">
  <front>
    <title abbrev="HAT">Harry's Allocation Table</title>

    <author fullname="Harry Jeffery" initials="H.J." role="editor"
            surname="Jeffery">
      <address>
        <email>harry@exec64.co.uk</email>
        <uri>http://www.exec64.co.uk/</uri>
      </address>
    </author>
    <date month="April" year="2012" />
    <area>Misc</area>
    <workgroup>0x10c Standards Committee</workgroup>
    <abstract>
      <t>This draft provides the specification for the HAT(Harry's Allocation Table) filesystem. It is intended to provide a clear reference for anyone wishing to implement this filesystem.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Currently there is no standard filesystem designed for use in a
      system built around the DCPU-16 architecture. This RFC provides a
      filesystem designed specifically for use on DCPU-16 systems.</t>
      <t>HAT is designed to be simple and easy to implement while still
      providing all the features required of a filesystem.</t>
    </section>

    <section anchor="Structures" title="Data Structures" >
      <t>This section defines the data structures that comprise the HAT filesystem.</t>
      <t>All sizes are given in words, which are considered to be 16 bits long.</t>
      
      <texttable anchor="StructureTable" title="Filesystem Structure">
        <ttcol align="center">Section</ttcol>
        <c>header</c>
        <c>inode map</c>
        <c>sector map</c>
        <c>inode 0</c>
        <c>inode 1</c>
        <c>inode 2</c>
        <c>...</c>
        <c>sector 0</c>
        <c>sector 1</c>
        <c>sector 2</c>
        <c>...</c>
      </texttable>

      <section anchor="Header" title="Header">
        <t>This structure contains the header information for HAT.</t>
        <t>The total size of the header is 16 words.</t>

        <texttable anchor="HeaderTable" title="Header Structure">
          <ttcol align="center">Size</ttcol>
          <ttcol align="center">Name</ttcol>
          <c>1</c><c>version</c>
          <c>1</c><c>flags</c>
          <c>1</c><c>num_inodes</c>
          <c>1</c><c>num_sectors</c>
          <c>2</c><c>inode_start</c>
          <c>2</c><c>sector_start</c>
          <c>1</c><c>sector_size</c>
          <c>2</c><c>inode_map_start</c>
          <c>2</c><c>sector_map_start</c>
          <c>3</c><c>padding</c>
        </texttable>

        <section anchor="HeaderVersion" title="version">
          <t>The version field is a magic number that identifies both that the
          filesystem in use is HAT and the version of HAT.</t>
          <t>The value of this field must be 0x4001. This magic number identifies
          the filesystem as version one of HAT.</t>
        </section>
  
        <section anchor="HeaderFlags" title="flags">
          <t>Bit 0 is the least significant bit, Bit 15 is the most significant bit.</t>
          <texttable anchor="HeaderFlagsTable" title="Header Flags">
            <ttcol align="center">Bit</ttcol>
            <ttcol align="center">Name</ttcol>
            <c>0</c><c>is_mounted</c>
            <c>1 to 15</c><c>Reserved for future use</c>
          </texttable>

          <section anchor="HeaderFlagIsMounted" title="is_mounted">
            <t>If this filesystem is currently mounted then this field must be
            set to 1, otherwise it must be set to 0.</t>
          </section>
        </section>

        <section anchor="HeaderNumInodes" title="num_inodes">
          <t>This field contains the total number of inodes in the filesystem.</t>
        </section>

        <section anchor="HeaderNumSectors" title="num_sectors">
          <t>This field contains the total number of sectors in the filesystem.</t>
        </section>

        <section anchor="HeaderInodeStart" title="inode_start">
          <t>This field contains the address of the first inode on disk.</t>
        </section>

        <section anchor="HeaderSectorStart" title="sector_start">
          <t>This field contains the address of the first sector on disk.</t>
        </section>

        <section anchor="HeaderSectorSize" title="sector_size">
          <t>This field contains the size of each sector in the filesystem.</t>
          <t>This must be a power of 2, such as 128, 256 or 512.</t>
        </section>

        <section anchor="HeaderInodeMapStart" title="inode_map_start">
          <t>This field contains the address of the start of the inode map.</t>
        </section>

        <section anchor="HeaderBlockMapStart" title="sector_map_start">
          <t>This field contains the address of the start of the sector map.</t>
        </section>

      </section>

      <section anchor="InodeMap" title="inode map">
        <t>This section is a bitmap representing which inodes are in use.
        It can be used to quickly locate free inodes for new files.</t>

        <texttable anchor="InodeMapTable" title="inode map Structure"> 
          <ttcol align="center">Size</ttcol>
          <ttcol align="center">Name</ttcol>
          <c>ceil(num_inodes/16)</c><c>bitmap</c>
        </texttable>

        <section anchor="InodeMapBitmap" title="bitmap">
          <t>This field is a bitmap that represents all the inodes in the
          filesystem. Each bit of the bitmap represents whether an inode
          is in use. When an inode is in use the corresponding bit is set
          to 1. When an inode is free, the corresponding bit is set to 0.</t>
          <t>Any spare bits at the end of the bitmap must be set to 1.</t>
        </section>
      </section>

      <section anchor="BlockMap" title="sector map">
        <t>This section is a bitmap representing which sectors are in use.
        It can be used to quickly locate free sectors for new files.</t>

        <texttable anchor="BlockMapTable" title="sector map structure"> 
          <ttcol align="center">Size</ttcol>
          <ttcol align="center">Name</ttcol>
          <c>ceil(num_sectors/16)</c><c>bitmap</c>
        </texttable>

        <section anchor="SectorMapBitmap" title="bitmap">
          <t>This field is a bitmap that represents all the sectors in the
          filesystem. Each bit of the bitmap represents whether an sector
          is in use. When an sector is in use the corresponding bit is set
          to 1. When an sector is free, the corresponding bit is set to 0.</t>
          <t>Any spare bits at the end of the bitmap must be set to 1.</t>
        </section>
      </section>

      <section anchor="Inode" title="inode">
        <t>The inode structure is used to store metadata about files.
        It is used to find the contents of the file on disk and the
        relationship of that file to the directory structure.</t>
        <t>The inode structure is 32 words.</t>
  
        <texttable anchor="InodeTable" title="inode Structure">
          <ttcol align="center">Size</ttcol>
          <ttcol align="center">Name</ttcol>
          <c>1</c><c>flags</c>
          <c>1</c><c>parent_inode</c>
          <c>2</c><c>content_size</c>
          <c>1</c><c>sector_index</c>
          <c>27</c><c>file_name</c>
        </texttable>

        <section anchor="InodeFlags" title="flags">
          <t>Bit 0 is the least significant bit, Bit 15 is the most significant bit.</t>
          <texttable anchor="InodeFlagsTable" title="inode Flags">
            <ttcol align="center">Bit</ttcol>
            <ttcol align="center">Name</ttcol>
            <c>0</c><c>in_use</c>
            <c>1</c><c>is_directory</c>
            <c>2</c><c>check_sector_integrity</c>
            <c>3 to 15</c><c>Reserved for future use</c>
          </texttable>

          <section anchor="InodeFlagInUse" title="in_use">
            <t>If the inode represents a file or directory in the filesystem that
            is valid and has not been deleted then this field must be set to 1.
            If the inode is not in use then this field must be set to 0.</t>
          </section>
    
          <section anchor="InodeFlagIsDirectory" title="is_directory">
            <t>If the inode represents a file then this flag must be set to 0.
            If the inode represents a directory then this flag must be set to 1.
            </t>
          </section>
    
          <section anchor="InodeFlagCheckSectorIntegrity" title="check_sector_integrity">
            <t>If this flag is set the all sectors that are used by this inode
            must have their integrity checked when read from or written to.</t>
          </section>
        </section>

        <section anchor="InodeParentinode" title="parent_inode">
          <t>This field contains the index of the inode's parent. Every inode
          has a parent except for the root inode whose parent is undefined and
          ignored.</t>
        </section>

        <section anchor="InodeContentSize" title="content_size">
          <t>This field behaves differently depending on whether the inode
          represents a file or a directory. If the inode represents a file
          then this field is set to the size of the file's contents in words.
          If the inode represents a directory then this field is set to the
          number of children the inode has.</t>
        </section>

        <section anchor="InodeSectorIndex" title="sector_index">
          <t>This field contains the index of the first data sector.</t>
        </section>

        <section anchor="InodeFileName" title="file_name">
          <t>This field contains a null terminated string, which is the
          file name of the inode.</t>
          <t>Only alphanumeric characters, periods(.) and underscores(_) are
          allowed in the filename.</t>
        </section>
      </section>

      <section anchor="Sector" title="sector">
        <t>The sector structure is used to store raw data for the inodes.
        When an inode represents a file, sectors are used to store the file
        data. When an inode represents a directory, sectors are used to
        store the children of the inode.</t>

        <texttable anchor="SectorTable" title="sector Structure">
          <ttcol align="center">Size</ttcol>
          <ttcol align="center">Name</ttcol>
          <c>1</c><c>next_sector_index</c>
          <c>sector_size - 2</c><c>sector_data</c>
        </texttable>

        <section anchor="SectorNextSectorINdex" title="next_sector_index">
          <t>This field contains the index of the sector that follows this one.
          When there is no such sector this field's value is undefined as the
          number of sectors known is determined by the content_size field of
          the inode structure.</t>
        </section>

        <section anchor="SectorSectorData" title="sector_data">
          <t>This field is used differently depending on whether the inode that
          uses this sector is representing a file or a directory.</t>
          <t>If the inode is a file then this field contains the raw file data.
          </t>
          <t>If the inode is a directory then this field contains a list of the
          inode indexes of the children of the inode.</t>
          <t>The size of this field is determined by the sector_size field in
          the header of the filesystem.</t>
        </section>

      </section>

    </section>
    
  </middle>

  <back>
  </back>

</rfc>

