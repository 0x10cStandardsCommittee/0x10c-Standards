


RFC (Draft-Fs)                                           H. Jeffery, Ed.
                                                          April 11, 2012


                        Harry's Allocation Table

Abstract

   This draft provides the specification for the HAT(Harry's Allocation
   Table) filesystem.  It is intended to provide a clear reference for
   anyone wishing to implement this filesystem.


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 2
   2.  Design Summary  . . . . . . . . . . . . . . . . . . . . . . . . 2
   3.  Data Structures . . . . . . . . . . . . . . . . . . . . . . . . 2
     3.1.  Lower Layer . . . . . . . . . . . . . . . . . . . . . . . . 3
       3.1.1.  header  . . . . . . . . . . . . . . . . . . . . . . . . 3
         3.1.1.1.  version . . . . . . . . . . . . . . . . . . . . . . 3
         3.1.1.2.  num_sectors . . . . . . . . . . . . . . . . . . . . 3
         3.1.1.3.  sector_map_start  . . . . . . . . . . . . . . . . . 4
         3.1.1.4.  sector_start  . . . . . . . . . . . . . . . . . . . 4
         3.1.1.5.  sector_size . . . . . . . . . . . . . . . . . . . . 4
         3.1.1.6.  sectors_used  . . . . . . . . . . . . . . . . . . . 4
       3.1.2.  sector map  . . . . . . . . . . . . . . . . . . . . . . 4
         3.1.2.1.  bitmap  . . . . . . . . . . . . . . . . . . . . . . 4
       3.1.3.  sector  . . . . . . . . . . . . . . . . . . . . . . . . 4
         3.1.3.1.  next_sector_index . . . . . . . . . . . . . . . . . 5
         3.1.3.2.  sector_data . . . . . . . . . . . . . . . . . . . . 5
     3.2.  Higher Layer  . . . . . . . . . . . . . . . . . . . . . . . 5
       3.2.1.  inode . . . . . . . . . . . . . . . . . . . . . . . . . 5
         3.2.1.1.  type  . . . . . . . . . . . . . . . . . . . . . . . 5
         3.2.1.2.  content_size  . . . . . . . . . . . . . . . . . . . 5
         3.2.1.3.  link_count  . . . . . . . . . . . . . . . . . . . . 6
       3.2.2.  link  . . . . . . . . . . . . . . . . . . . . . . . . . 6
         3.2.2.1.  strip_start_sector  . . . . . . . . . . . . . . . . 6
         3.2.2.2.  file_name . . . . . . . . . . . . . . . . . . . . . 6
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 6











Jeffery                                                         [Page 1]

                                   HAT                        April 2012


1.  Introduction

   Currently there is no standard filesystem designed for use in a
   system built around the DCPU-16 architecture.  This RFC provides a
   filesystem designed specifically for use on DCPU-16 systems.

   HAT is designed to be simple and easy to implement while still
   providing all the features required of a filesystem.


2.  Design Summary

   HAT has a two layered design.  The lower layer consists only of
   sectors.  The lower layer is abstracted from the higher layer using
   "strips".  The higher layer consists of inodes, links and raw file
   data.

   The lower layer deals with the management of sectors and provides
   access to virtual strips of disk space.

   The higher layer stores inodes, links and file data in these strips.
   Each strip (constructed in the lower layer using one or more sectors)
   contains an inode followed by either links or file data.  Each inode
   represents either a file or a directory.  If the inode represents a
   file the strip contains the inode followed immediately by all the
   file data.  If the inode represents a directory the strip contains
   the inode followed by a list of links.


3.  Data Structures

   This section defines the data structures that comprise the HAT
   filesystem.

   All sizes are given in words, which are considered to be 16 bits
   long.















Jeffery                                                         [Page 2]

                                   HAT                        April 2012


3.1.  Lower Layer

                              +------------+
                              |   Section  |
                              +------------+
                              |   header   |
                              | sector map |
                              |  sector 0  |
                              |  sector 1  |
                              |  sector 2  |
                              |     ...    |
                              +------------+

                       Table 1: Filesystem Structure

3.1.1.  header

   This structure contains the header information for HAT.

   The total size of the header is 16 words.

                        +------+------------------+
                        | Size |       Name       |
                        +------+------------------+
                        |   1  |      version     |
                        |   1  |    num_sectors   |
                        |   2  | sector_map_start |
                        |   2  |   sector_start   |
                        |   1  |    sector_size   |
                        |   1  |   sectors_used   |
                        +------+------------------+

                         Table 2: Header Structure

3.1.1.1.  version

   The version field is a magic number that identifies both that the
   filesystem in use is HAT and the version of HAT.

   The value of this field must be 0x4001.  This magic number identifies
   the filesystem as version one of HAT.

3.1.1.2.  num_sectors

   This field contains the total number of sectors in the filesystem.






Jeffery                                                         [Page 3]

                                   HAT                        April 2012


3.1.1.3.  sector_map_start

   This field contains the address of the start of the sector map.

3.1.1.4.  sector_start

   This field contains the address of the first sector on disk.

3.1.1.5.  sector_size

   This field contains the size of each sector in the filesystem.

   This must be a power of 2, such as 128, 256 or 512.

3.1.1.6.  sectors_used

   This field contains the number of sectors that are currently in use.

3.1.2.  sector map

   This section is a bitmap representing which sectors are in use.  It
   can be used to quickly locate free sectors for new files.

                     +----------------------+--------+
                     |         Size         |  Name  |
                     +----------------------+--------+
                     | ceil(num_sectors/16) | bitmap |
                     +----------------------+--------+

                       Table 3: sector map structure

3.1.2.1.  bitmap

   This field is a bitmap that represents all the sectors in the
   filesystem.  Each bit of the bitmap represents whether an sector is
   in use.  When an sector is in use the corresponding bit is set to 1.
   When an sector is free, the corresponding bit is set to 0.

   Any spare bits at the end of the bitmap must be set to 1.

3.1.3.  sector

   The sector structure is used to store blocks of raw data.  Each
   sector may point to another sector.  The chain of sectors that forms
   is then provided to the higher layer in the form of strips that mask
   the non-contiguous nature of the sectors.





Jeffery                                                         [Page 4]

                                   HAT                        April 2012


                  +-----------------+-------------------+
                  |       Size      |        Name       |
                  +-----------------+-------------------+
                  |        1        | next_sector_index |
                  | sector_size - 1 |    sector_data    |
                  +-----------------+-------------------+

                         Table 4: sector Structure

3.1.3.1.  next_sector_index

   This field contains the index of the sector that follows this one.
   When there is no such sector this field's value is set to 0x0000.

3.1.3.2.  sector_data

   This field simply contains raw data.

   The size of this field is determined by the sector_size field in the
   header of the filesystem.

3.2.  Higher Layer

3.2.1.  inode

   The inode structure is used to store metadata about files.

                          +------+--------------+
                          | Size |     Name     |
                          +------+--------------+
                          |   1  |     type     |
                          |   2  | content_size |
                          |   1  |  link_count  |
                          +------+--------------+

                         Table 5: inode Structure

3.2.1.1.  type

   This field indicates what type of inode it is.  If this field is set
   to 0 then the inode is not in use and represents nothing.  If this
   field is set to 1 then the inode represents a directory.  If this
   field is set to 2 then the inode represents a file.

3.2.1.2.  content_size

   This field contains the amount of data stored with this inode in
   words.



Jeffery                                                         [Page 5]

                                   HAT                        April 2012


3.2.1.3.  link_count

   This field contains the number of links there are that point to the
   strip containing this inode.

3.2.2.  link

                       +------+--------------------+
                       | Size |        Name        |
                       +------+--------------------+
                       |   1  | strip_start_sector |
                       |  15  |      file_name     |
                       +------+--------------------+

                          Table 6: link structure

3.2.2.1.  strip_start_sector

   This field contains the index of the start sector of the strip the
   inode being linked to is stored in.

3.2.2.2.  file_name

   This field contains the file name to be associated with the inode
   that is being linked.  Only alphanumeric characters, periods(.) and
   underscores(_) are allowed in the filename.  The maximum length of
   the filename is 15 characters, any unused characters at the end of
   the filename must be set to 0x0000.


Author's Address

   Harry Jeffery (editor)

   Email: harry@exec64.co.uk
   URI:   http://www.exec64.co.uk/















Jeffery                                                         [Page 6]

