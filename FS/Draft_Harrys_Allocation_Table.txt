


RFC (Draft-Fs)                                           H. Jeffery, Ed.
                                                          April 10, 2012


                        Harry's Allocation Table

Abstract

   This draft provides the specification for the HAT(Harry's Allocation
   Table) filesystem.  It is intended to provide a clear reference for
   anyone wishing to implement this filesystem.








































Jeffery                                                         [Page 1]

                                   HAT                        April 2012


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   2.  Data Structures . . . . . . . . . . . . . . . . . . . . . . . . 3
     2.1.  Header  . . . . . . . . . . . . . . . . . . . . . . . . . . 3
       2.1.1.  version . . . . . . . . . . . . . . . . . . . . . . . . 4
       2.1.2.  flags . . . . . . . . . . . . . . . . . . . . . . . . . 4
         2.1.2.1.  is_mounted  . . . . . . . . . . . . . . . . . . . . 4
       2.1.3.  num_inodes  . . . . . . . . . . . . . . . . . . . . . . 5
       2.1.4.  num_blocks  . . . . . . . . . . . . . . . . . . . . . . 5
       2.1.5.  inode_start . . . . . . . . . . . . . . . . . . . . . . 5
       2.1.6.  inode_start . . . . . . . . . . . . . . . . . . . . . . 5
       2.1.7.  block_size  . . . . . . . . . . . . . . . . . . . . . . 5
       2.1.8.  inode_map_start . . . . . . . . . . . . . . . . . . . . 5
       2.1.9.  block_map_start . . . . . . . . . . . . . . . . . . . . 5
       2.1.10. hash  . . . . . . . . . . . . . . . . . . . . . . . . . 5
     2.2.  inode map . . . . . . . . . . . . . . . . . . . . . . . . . 5
       2.2.1.  hash  . . . . . . . . . . . . . . . . . . . . . . . . . 6
       2.2.2.  bitmap  . . . . . . . . . . . . . . . . . . . . . . . . 6
     2.3.  block map . . . . . . . . . . . . . . . . . . . . . . . . . 6
       2.3.1.  hash  . . . . . . . . . . . . . . . . . . . . . . . . . 6
       2.3.2.  bitmap  . . . . . . . . . . . . . . . . . . . . . . . . 6
     2.4.  inode . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
       2.4.1.  hash  . . . . . . . . . . . . . . . . . . . . . . . . . 7
       2.4.2.  flags . . . . . . . . . . . . . . . . . . . . . . . . . 7
         2.4.2.1.  in_use  . . . . . . . . . . . . . . . . . . . . . . 7
         2.4.2.2.  is_directory  . . . . . . . . . . . . . . . . . . . 8
         2.4.2.3.  check_block_integrity . . . . . . . . . . . . . . . 8
       2.4.3.  parent_inode  . . . . . . . . . . . . . . . . . . . . . 8
       2.4.4.  content_size  . . . . . . . . . . . . . . . . . . . . . 8
       2.4.5.  block_index . . . . . . . . . . . . . . . . . . . . . . 8
       2.4.6.  file_name . . . . . . . . . . . . . . . . . . . . . . . 8
     2.5.  block . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
       2.5.1.  hash  . . . . . . . . . . . . . . . . . . . . . . . . . 9
       2.5.2.  next_block_index  . . . . . . . . . . . . . . . . . . . 9
       2.5.3.  block_data  . . . . . . . . . . . . . . . . . . . . . . 9
   3.  Security Considerations . . . . . . . . . . . . . . . . . . . . 9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 9













Jeffery                                                         [Page 2]

                                   HAT                        April 2012


1.  Introduction

   Currently there is no standard filesystem designed for use in a
   system built around the DCPU-16 architecture.  This RFC provides a
   filesystem designed specifically for use on DCPU-16 systems.

   HAT is designed to be simple and easy to implement while still
   providing all the features required of a filesystem.


2.  Data Structures

   This section defines the data structures that comprise the HAT
   filesystem.

   All sizes are given in words, which are considered to be 16 bits
   long.

                               +-----------+
                               |  Section  |
                               +-----------+
                               |   Header  |
                               | inode map |
                               | block map |
                               |  inode 0  |
                               |  inode 1  |
                               |  inode 2  |
                               |    ...    |
                               |  block 0  |
                               |  block 1  |
                               |  block 2  |
                               |    ...    |
                               +-----------+

                       Table 1: Filesystem Structure

2.1.  Header

   This structure contains the header information for HAT.

   The total size of the header is 16 words.










Jeffery                                                         [Page 3]

                                   HAT                        April 2012


                        +------+-----------------+
                        | Size |       Name      |
                        +------+-----------------+
                        |   1  |     version     |
                        |   1  |      flags      |
                        |   1  |    num_inodes   |
                        |   1  |    num_blocks   |
                        |   2  |   inode_start   |
                        |   2  |   block_start   |
                        |   1  |    block_size   |
                        |   2  | inode_map_start |
                        |   2  | block_map_start |
                        |   1  |       hash      |
                        |   2  |     padding     |
                        +------+-----------------+

                         Table 2: Header Structure

2.1.1.  version

   The version field is a magic number that identifies both that the
   filesystem in use is HAT and the version of HAT.

   The value of this field must be 0x4001.  This magic number identifies
   the filesystem as version one of HAT.

2.1.2.  flags

   Bit 0 is the least significant bit, Bit 15 is the most significant
   bit.

                   +---------+-------------------------+
                   |   Bit   |           Name          |
                   +---------+-------------------------+
                   |    0    |        is_mounted       |
                   | 1 to 15 | Reserved for future use |
                   +---------+-------------------------+

                           Table 3: Header Flags

2.1.2.1.  is_mounted

   If this filesystem is currently mounted then this field must be set
   to 1, otherwise it must be set to 0.







Jeffery                                                         [Page 4]

                                   HAT                        April 2012


2.1.3.  num_inodes

   This field contains the total number of inodes in the filesystem.

2.1.4.  num_blocks

   This field contains the total number of blocks in the filesystem.

2.1.5.  inode_start

   This field contains the address of the first inode on disk.

2.1.6.  inode_start

   This field contains the address of the first block on disk.

2.1.7.  block_size

   This field contains the size of each block in the filesystem.

   This must be a power of 2, such as 128, 256 or 512.

2.1.8.  inode_map_start

   This field contains the address of the start of the inode map.

2.1.9.  block_map_start

   This field contains the address of the start of the block map.

2.1.10.  hash

   This field contains the CRC16 hash of the rest of the header.  The
   padding and the hash fields are not included in the hash, only the
   words from the version field up to, but excluding the hash field are
   included in the hash.

2.2.  inode map

   This section is a bitmap representing which inodes are in use.  It
   can be used to quickly locate free inodes for new files.










Jeffery                                                         [Page 5]

                                   HAT                        April 2012


                     +---------------------+--------+
                     |         Size        |  Name  |
                     +---------------------+--------+
                     |          1          |  hash  |
                     | ceil(num_inodes/16) | bitmap |
                     +---------------------+--------+

                       Table 4: inode map Structure

2.2.1.  hash

   This field is a hash of the bitmap field.

2.2.2.  bitmap

   This field is a bitmap that represents all the inodes in the
   filesystem.  Each bit of the bitmap represents whether an inode is in
   use.  When an inode is in use the corresponding bit is set to 1.
   When an inode is free, the corresponding bit is set to 0.

   Any spare bits at the end of the bitmap must be set to 1.

2.3.  block map

   This section is a bitmap representing which blocks are in use.  It
   can be used to quickly locate free blocks for new files.

                     +---------------------+--------+
                     |         Size        |  Name  |
                     +---------------------+--------+
                     |          1          |  hash  |
                     | ceil(num_blocks/16) | bitmap |
                     +---------------------+--------+

                       Table 5: block map structure

2.3.1.  hash

   This field is a hash of the bitmap field.

2.3.2.  bitmap

   This field is a bitmap that represents all the blocks in the
   filesystem.  Each bit of the bitmap represents whether an block is in
   use.  When an block is in use the corresponding bit is set to 1.
   When an block is free, the corresponding bit is set to 0.

   Any spare bits at the end of the bitmap must be set to 1.



Jeffery                                                         [Page 6]

                                   HAT                        April 2012


2.4.  inode

   The inode structure is used to store metadata about files.  It is
   used to find the contents of the file on disk and the relationship of
   that file to the directory structure.

   The inode structure is 32 words.

                          +------+--------------+
                          | Size |     Name     |
                          +------+--------------+
                          |   1  |     hash     |
                          |   1  |     flags    |
                          |   1  | parent_inode |
                          |   2  | content_size |
                          |   1  |  block_index |
                          |  26  |   file_name  |
                          +------+--------------+

                         Table 6: inode Structure

2.4.1.  hash

   This field contains the CRC16 hash of the rest of the inode.

2.4.2.  flags

   Bit 0 is the least significant bit, Bit 15 is the most significant
   bit.

                   +---------+-------------------------+
                   |   Bit   |           Name          |
                   +---------+-------------------------+
                   |    0    |          in_use         |
                   |    1    |       is_directory      |
                   |    2    |  check_block_integrity  |
                   | 3 to 15 | Reserved for future use |
                   +---------+-------------------------+

                           Table 7: inode Flags

2.4.2.1.  in_use

   If the inode represents a file or directory in the filesystem that is
   valid and has not been deleted then this field must be set to 1.  If
   the inode is not in use then this field must be set to 0.





Jeffery                                                         [Page 7]

                                   HAT                        April 2012


2.4.2.2.  is_directory

   If the inode represents a file then this flag must be set to 0.  If
   the inode represents a directory then this flag must be set to 1.

2.4.2.3.  check_block_integrity

   If this flag is set the all blocks that are used by this inode must
   have their integrity checked when read from or written to.

2.4.3.  parent_inode

   This field contains the index of the inode's parent.  Every inode has
   a parent except for the root inode whose parent is undefined and
   ignored.

2.4.4.  content_size

   This field behaves differently depending on whether the inode
   represents a file or a directory.  If the inode represents a file
   then this field is set to the size of the file's contents in words.
   If the inode represents a directory then this field is set to the
   number of children the inode has.

2.4.5.  block_index

   This field contains the index of the first data block.

2.4.6.  file_name

   This field contains a null terminated string, which is the file name
   of the inode.

   Only alphanumeric characters, periods(.) and underscores(_) are
   allowed in the filename.

2.5.  block

   The block structure is used to store raw data for the inodes.  When
   an inode represents a file, blocks are used to store the file data.
   When an inode represents a directory, blocks are used to store the
   children of the inode.









Jeffery                                                         [Page 8]

                                   HAT                        April 2012


                   +----------------+------------------+
                   |      Size      |       Name       |
                   +----------------+------------------+
                   |        1       |       hash       |
                   |        1       | next_block_index |
                   | block_size - 2 |    block_data    |
                   +----------------+------------------+

                         Table 8: block Structure

2.5.1.  hash

   This field is only used when the check_block_integrity flag is
   enabled in the inode that this block is used by.  When used, this
   field must contain the CRC16 hash of the rest of the rest of the
   block.

2.5.2.  next_block_index

   This field contains the index of the block that follows this one.
   When there is no such block this field's value is undefined as the
   number of blocks known is determined by the content_size field of the
   inode structure.

2.5.3.  block_data

   This field is used differently depending on whether the inode that
   uses this block is representing a file or a directory.

   If the inode is a file then this field contains the raw file data.

   If the inode is a directory then this field contains a list of the
   inode indexes of the children of the inode.

   The size of this field is determined by the block_size field in the
   header of the filesystem.


3.  Security Considerations

   As there is no way to prevent programs from accessing the disk
   directly and reading/writing data HAT makes no attempt at providing
   any data security.








Jeffery                                                         [Page 9]

                                   HAT                        April 2012


Author's Address

   Harry Jeffery (editor)

   Email: harry@exec64.co.uk
   URI:   http://www.exec64.co.uk/













































Jeffery                                                        [Page 10]

