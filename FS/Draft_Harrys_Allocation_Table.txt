


RFC (Draft-Fs)                                           H. Jeffery, Ed.
                                                          April 22, 2012


                        Harry's Allocation Table

Abstract

   This draft provides the specification for the HAT(Harry's Allocation
   Table) filesystem.  It is intended to provide a clear reference for
   anyone wishing to implement this filesystem.


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 2
   2.  Design Summary  . . . . . . . . . . . . . . . . . . . . . . . . 2
   3.  Data Structures . . . . . . . . . . . . . . . . . . . . . . . . 2
     3.1.  Lower Layer . . . . . . . . . . . . . . . . . . . . . . . . 3
       3.1.1.  header  . . . . . . . . . . . . . . . . . . . . . . . . 3
         3.1.1.1.  version . . . . . . . . . . . . . . . . . . . . . . 3
         3.1.1.2.  num_sectors . . . . . . . . . . . . . . . . . . . . 3
         3.1.1.3.  sector_map_start  . . . . . . . . . . . . . . . . . 4
         3.1.1.4.  sector_joins_start  . . . . . . . . . . . . . . . . 4
         3.1.1.5.  sectors_start . . . . . . . . . . . . . . . . . . . 4
         3.1.1.6.  sector_size . . . . . . . . . . . . . . . . . . . . 4
         3.1.1.7.  sectors_used  . . . . . . . . . . . . . . . . . . . 4
       3.1.2.  sector map  . . . . . . . . . . . . . . . . . . . . . . 4
         3.1.2.1.  bitmap  . . . . . . . . . . . . . . . . . . . . . . 4
       3.1.3.  sector joins  . . . . . . . . . . . . . . . . . . . . . 5
       3.1.4.  sector  . . . . . . . . . . . . . . . . . . . . . . . . 5
     3.2.  Higher Layer  . . . . . . . . . . . . . . . . . . . . . . . 5
       3.2.1.  inode . . . . . . . . . . . . . . . . . . . . . . . . . 5
         3.2.1.1.  type  . . . . . . . . . . . . . . . . . . . . . . . 6
         3.2.1.2.  num_links . . . . . . . . . . . . . . . . . . . . . 6
         3.2.1.3.  content_size  . . . . . . . . . . . . . . . . . . . 6
       3.2.2.  link  . . . . . . . . . . . . . . . . . . . . . . . . . 6
         3.2.2.1.  strip_start_sector  . . . . . . . . . . . . . . . . 7
         3.2.2.2.  file_name . . . . . . . . . . . . . . . . . . . . . 7
   4.  Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
     4.1.  Constructing a HAT filesystem . . . . . . . . . . . . . . . 7
     4.2.  Finding a file's inode  . . . . . . . . . . . . . . . . . . 8
     4.3.  Allocating sectors  . . . . . . . . . . . . . . . . . . . . 8
   5.  Security Considerations . . . . . . . . . . . . . . . . . . . . 8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 8






Jeffery                                                         [Page 1]

                                   HAT                        April 2012


1.  Introduction

   This RFC provides a filesystem designed specifically for use on
   DCPU-16 systems.

   HAT is designed to be simple and easy to implement while still
   providing all the features required of a filesystem.


2.  Design Summary

   HAT has a two layered design.  The lower layer consists only of
   sectors.  The lower layer is abstracted from the higher layer using
   "strips".  The higher layer consists of inodes, links and raw file
   data.

   The lower layer deals with the management of sectors and provides
   access to virtual strips of disk space.

   The higher layer stores inodes, links and file data in these strips.
   Each strip (constructed in the lower layer using one or more sectors)
   contains an inode followed by either links or file data.

   Each inode represents either a file or a directory.  If the inode
   represents a file the strip contains the inode followed immediately
   by all the file data.  If the inode represents a directory the strip
   contains the inode followed by a list of links.

   Each link binds a file name to a file/directory.  Each directory may
   contain several links to more directories or files, resulting in a
   tree growing from the root directory.


3.  Data Structures

   This section defines the data structures that comprise the HAT
   filesystem.

   All sizes are given in words, which are considered to be 16 bits
   long.











Jeffery                                                         [Page 2]

                                   HAT                        April 2012


3.1.  Lower Layer

                             +--------------+
                             |    Section   |
                             +--------------+
                             |    header    |
                             |  sector map  |
                             | sector joins |
                             |   sector 0   |
                             |   sector 1   |
                             |   sector 2   |
                             |      ...     |
                             +--------------+

                       Table 1: Filesystem Structure

3.1.1.  header

   This structure contains the header information for HAT.

                       +------+--------------------+
                       | Size |        Name        |
                       +------+--------------------+
                       |   1  |       version      |
                       |   1  |     num_sectors    |
                       |   2  |  sector_map_start  |
                       |   2  | sector_joins_start |
                       |   2  |    sectors_start   |
                       |   1  |     sector_size    |
                       |   1  |    sectors_used    |
                       +------+--------------------+

                         Table 2: Header Structure

3.1.1.1.  version

   The version field is a magic number that identifies both that the
   filesystem in use is HAT and the version of HAT.

   The value of this field must be 0x4001.  This magic number identifies
   the filesystem as version one of HAT.

3.1.1.2.  num_sectors

   This field contains the total number of sectors in the filesystem.






Jeffery                                                         [Page 3]

                                   HAT                        April 2012


3.1.1.3.  sector_map_start

   This field contains the address of the start of the sector map.

3.1.1.4.  sector_joins_start

   This field contains the address of the start of the array of sector
   joins.

3.1.1.5.  sectors_start

   This field contains the address of the first sector on disk.

   This is required because the first sector may not be positioned
   immediately after the header.  The first sector may be positioned to
   provide alignment with the underlying disk's blocks.

3.1.1.6.  sector_size

   This field contains the size of each sector in the filesystem.

   This must be a power of 2, such as 128, 256 or 512.

3.1.1.7.  sectors_used

   This field contains the number of sectors that are currently in use.

3.1.2.  sector map

   This section is a bitmap representing which sectors are in use.  It
   can be used to quickly locate free sectors for new files.

                     +----------------------+--------+
                     |         Size         |  Name  |
                     +----------------------+--------+
                     | ceil(num_sectors/16) | bitmap |
                     +----------------------+--------+

                       Table 3: sector map structure

3.1.2.1.  bitmap

   This field is a bitmap that represents all the sectors in the
   filesystem.  Each bit of the bitmap represents whether a sector is in
   use.  When a sector is in use the corresponding bit is set to 1.
   When a sector is free, the corresponding bit is set to 0.

   The MSB is considered to be the first bit and the LSB is considered



Jeffery                                                         [Page 4]

                                   HAT                        April 2012


   to be the last bit.

   Any spare bits at the end of the bitmap must be set to 1.

3.1.3.  sector joins

   This section is an array of words, each word is used to join one
   sector to another.

                          +------+--------------+
                          | Size |     Name     |
                          +------+--------------+
                          |   1  | sector0_next |
                          |   1  | sector1_next |
                          |   1  | sector2_next |
                          |   1  | sector3_next |
                          |   1  |      ...     |
                          +------+--------------+

                      Table 4: sector links structure

   Each entry joins the end of one sector to the start of another, if
   there is no next sector the entry is set to 0.

   For example, if there is a strip starting in sector 0, then
   continuing in sector 2, then sector 1, then finishing in sector 3,
   then the value of sector0_next will be 2, sector1_next will be 3,
   sector2_next will be 1, sector3_next will be 0.

   The total length of this section in words is the total number of
   sectors in the filesystem.

3.1.4.  sector

   The sector structure is used to store blocks of raw data.  Sectors
   themselves are just raw blocks of data with no formatting or
   wrapping.

   Each sector has the size equal to the sector_size, as defined by the
   header of the filesystem.

3.2.  Higher Layer

3.2.1.  inode

   The inode structure is used to store metadata about files.





Jeffery                                                         [Page 5]

                                   HAT                        April 2012


                          +------+--------------+
                          | Size |     Name     |
                          +------+--------------+
                          |   1  |     type     |
                          |   1  |   num_links  |
                          |   2  | content_size |
                          +------+--------------+

                         Table 5: inode structure

3.2.1.1.  type

                     +-------+----------------------+
                     | value |        meaning       |
                     +-------+----------------------+
                     |   0   |    inode is unused   |
                     |   1   | inode is a directory |
                     |   2   |    inode is a file   |
                     +-------+----------------------+

                           Table 6: type values

   This field indicates what type of inode it is.  If this field is set
   to 0 then the inode is not in use and represents nothing.  If this
   field is set to 1 then the inode represents a directory.  If this
   field is set to 2 then the inode represents a file.

3.2.1.2.  num_links

   This field contains the number of links there are that point to the
   strip containing this inode.

3.2.1.3.  content_size

   This field contains the amount of data stored with this inode in
   words.

3.2.2.  link

                       +------+--------------------+
                       | Size |        Name        |
                       +------+--------------------+
                       |   1  | strip_start_sector |
                       |  15  |      file_name     |
                       +------+--------------------+

                          Table 7: link structure




Jeffery                                                         [Page 6]

                                   HAT                        April 2012


3.2.2.1.  strip_start_sector

   This field contains the index of the start sector of the strip the
   inode being linked to is stored in.

3.2.2.2.  file_name

   This field contains the file name to be associated with the inode
   that is being linked.  Only alphanumeric characters, periods(.) and
   underscores(_) are allowed in the filename.  The maximum length of
   the filename is 15 characters, any unused characters at the end of
   the filename must be set to 0x0000.


4.  Usage

   This section contains information and examples on the operation and
   usage of the HAT filesystem.  It is meant only as a rough guide for
   someone who is wishing to implement HAT.

4.1.  Constructing a HAT filesystem

   The HAT filesystem is very simple to construct.  The creation of the
   filesystem can be split into a few simple steps.

   1.  Calculate size and number of sectors from disk space.

   2.  Write the header to disk, the sector map and initialise all the
       sectors as unused.

   3.  Create the root directory's inode using a strip starting at
       sector 0.

   Once the structure of the filesystem has been initialised it is ready
   for use.

   For 16 sectors on a disk the amount of disk space required is
   (sector_size * 16) + 1.  So, to calculate the amount of sectors you
   can fit on a disk simply minus the size of the header from the disk
   and then divide it by (sector_size * 16) + 1.  Round the resulting
   number down to have the maximum number of sectors that can go onto
   the disk.

   It is highly recommended to set the sector size less than or equal to
   the size of blocks on the disk that the filesystem is being created
   on.  It is also highly advised to align the first sector to a block
   to maximise io performance.




Jeffery                                                         [Page 7]

                                   HAT                        April 2012


4.2.  Finding a file's inode

   To open a file is very simple.  HAT is simply passed an absolute path
   to the file.  The path is then broken up into a list of of
   directories.  The list is traversed, starting at the root inode until
   the file's inode is found.

4.3.  Allocating sectors

   Unused sectors can be found very quickly using the sector map.  By
   performing NOT(word AND 0xFFFF) against each word of the bitmap a
   free sector can be found.


5.  Security Considerations

   As there is no way to stop a program reading from or writing straight
   to the disk HAT makes no attempt at providing any security.  Any file
   security should be done in userspace using encryption.


Author's Address

   Harry Jeffery (editor)

   Email: harry@exec64.co.uk
   URI:   http://www.exec64.co.uk/
























Jeffery                                                         [Page 8]

