


RFC X1005 (Draft-Lib)                                        M. Schuetze
                                                              April 2012


                             String Format

Abstract

   This document presents a general format for strings in libraries
   intended to be shared accross programs and with other users.


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . . . 2
     1.2.  Used Terms  . . . . . . . . . . . . . . . . . . . . . . . . 2
   2.  Structure of P-Strings  . . . . . . . . . . . . . . . . . . . . 3
   3.  Rationale for using P-Strings . . . . . . . . . . . . . . . . . 3
     3.1.  Benefits of P-Strings . . . . . . . . . . . . . . . . . . . 3
     3.2.  Disadvantages of P-Strings  . . . . . . . . . . . . . . . . 3
   4.  Other Notes . . . . . . . . . . . . . . . . . . . . . . . . . . 3
   5.  Packed P-Strings  . . . . . . . . . . . . . . . . . . . . . . . 4
   6.  Security Considerations . . . . . . . . . . . . . . . . . . . . 4
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 4
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 4

























Schuetze                                                        [Page 1]

                              String Format                   April 2012


1.  Introduction

   Shared Libraries depend on certain formats being given.  Strings,
   being a common argument type for cross-library calls, should
   therefore be standardized.  Length-prefixed strings are to be used
   for security and efficency reasons.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Used Terms

   o  "String" or "string" refers to a sequence of characters of
      variable length.

   o  "P-String", "pstring" or "length-prefixed string" refers to a
      8-bit value representing the length of the following string,
      followed by n characters of length n, where n is the value of the
      length-prefix.

   o  "C-String", "cstring" or "null-terminated string" refers to a
      sequence of characters that may not include the character with the
      value 0, followed by the character with value 0 (also known as
      "null-terminator" or "null character")

   o  "Character" or "character" refers to a group of bits representing
      a letter, a number, a punctuation mark, or a control character.  A
      control character is a non-printable character that influences the
      text.

   o  "Word" or "word" refers to a group of 16 bits representing a
      value.  A word is the smallest addressable space in the DCPU.

   o  "Library" or "library" refers to a group of functions that are
      used across different programs.

   o  "Program" or "program" refers to a sequence of machine
      instructions for the DCPU.

   o  "User" or "user" refers to any person using or creating a program.








Schuetze                                                        [Page 2]

                              String Format                   April 2012


2.  Structure of P-Strings

   A P-String is composed of a 16-bit length prefix and a sequence of n
   characters where n is the value of the prefix.

   P-String = n (nCHAR)

   The prefix for such a string MUST be present and MUST represent the
   exact number of following characters.


3.  Rationale for using P-Strings

3.1.  Benefits of P-Strings

   The rationale of using P-Strings is a simple matter of weighting
   benefits against disadvantages.  Note that this is not a normative
   rationale, but one developed by the Standards Committee with focus on
   the DCPU design.

   o  Accessing the length of the string is O(1) fast.

   o  Buffer overflows are prevented by being able to allocate enough
      space ahead of time.

      *  This also increases the security of programs by preventing
         arbitrary shell code from being executed.

   o  The null-character can be used in strings, while using it in
      C-Strings would terminate the string.

   o  The runtime cost of P-String concatenation is O(n), while the
      runtime cost of C-String concatenation is O(n+m).

3.2.  Disadvantages of P-Strings

   o  Instead of the conventional 0, indexing begins at 1.

   o  Even for fixed-length fields, the first word would be needed for
      the length.


4.  Other Notes

   o  Since the smallest addressable size in the DCPU is a word (16
      bit), this effectively allows a maximum string length of 65536
      characters without any loss in efficency.




Schuetze                                                        [Page 3]

                              String Format                   April 2012


   o  Cutting off the beginning of a string is more expensive for
      P-Strings, but cutting off the end is more expensive for C-Strings
      (other solutions are possible, but introduce memory leaks).
      Therefore, those two arguments negate each other.

   o  The names P-String and C-String come from Pascal and C
      respectively, both using their respective format.


5.  Packed P-Strings

   The current implementation of characters in the DCPU effectively
   leaves the high 8 bits empty.  It is therefore possible to store two
   characters in one word.  Such packed strings are out of the scope of
   this document and should be defined in another RFC.


6.  Security Considerations

   Using P-Strings reduces the risk of arbitrary shell code being
   executed by overflowing the input buffer.  However, hidden
   instructions in the string may be executed later when the sections
   are not cleared and the stack or instruction pointer is moved there.
   Measurements should be taken by the user to assure that this does not
   happen.


7.  References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.


Author's Address

   Malte Schuetze

   Email: malte.schuetze@fgms.de













Schuetze                                                        [Page 4]

